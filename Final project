1. **Firebase Configuration*

     ```javascript
     import { initializeApp } from "firebase/app";
     import { getAuth } from "firebase/auth";
     import { getFirestore } from "firebase/firestore";

     const firebaseConfig = {
       apiKey: "YOUR_API_KEY",
       authDomain: "YOUR_AUTH_DOMAIN",
       projectId: "YOUR_PROJECT_ID",
       storageBucket: "YOUR_STORAGE_BUCKET",
       messagingSenderId: "YOUR_MESSAGING_SENDER_ID",
       appId: "YOUR_APP_ID"
     };

     const app = initializeApp(firebaseConfig);
     const auth = getAuth(app);
     const db = getFirestore(app);

     export { auth, db };
     ```

2. **Sign-Up and Login Forms*

   ```javascript
   import { auth } from './firebase';
   import { createUserWithEmailAndPassword, signInWithEmailAndPassword } from 'firebase/auth';

   // Sign-Up Function
   const signUp = (email, password) => {
     createUserWithEmailAndPassword(auth, email, password)
       .then((userCredential) => {
         // Signed in 
         const user = userCredential.user;
         console.log("User signed up: ", user);
       })
       .catch((error) => {
         console.error("Error signing up: ", error);
       });
   };

   // Login Function
   const login = (email, password) => {
     signInWithEmailAndPassword(auth, email, password)
       .then((userCredential) => {
         // Signed in 
         const user = userCredential.user;
         console.log("User logged in: ", user);
       })
       .catch((error) => {
         console.error("Error logging in: ", error);
       });
   };
   ```

### Designing Firestore Database Structure

1. **Plan Database Structure**:

     ```plaintext
     users (collection)
       |
       |-- userID (document)
           |
           |-- tasks (collection)
               |
               |-- taskID (document)
                   |
                   |-- title: string
                   |-- description: string
                   |-- createdAt: timestamp
                   |-- updatedAt: timestamp
     ```

### Implementing Task Management Feature

1. **Creating Task**:


   ```javascript
   import { db, auth } from './firebase';
   import { collection, addDoc, serverTimestamp } from 'firebase/firestore';

   const addTask = async (title, description) => {
     try {
       const user = auth.currentUser;
       if (user) {
         await addDoc(collection(db, 'users', user.uid, 'tasks'), {
           title,
           description,
           createdAt: serverTimestamp(),
           updatedAt: serverTimestamp()
         });
       }
     } catch (error) {
       console.error("Error adding task: ", error);
     }
   };
   ```

2. **Reading task.

   ```javascript
   import { db, auth } from './firebase';
   import { collection, query, where, getDocs } from 'firebase/firestore';

   const getTasks = async () => {
     try {
       const user = auth.currentUser;
       if (user) {
         const q = query(collection(db, 'users', user.uid, 'tasks'));
         const querySnapshot = await getDocs(q);
         const tasks = querySnapshot.docs.map(doc => ({
           id: doc.id,
           ...doc.data()
         }));
         console.log("Tasks: ", tasks);
       }
     } catch (error) {
       console.error("Error getting tasks: ", error);
     }
   };
   ```

3. **Updating tasks**:


   ```javascript
   import { db, auth } from './firebase';
   import { doc, updateDoc, serverTimestamp } from 'firebase/firestore';

   const updateTask = async (taskId, updatedTask) => {
     try {
       const user = auth.currentUser;
       if (user) {
         const taskRef = doc(db, 'users', user.uid, 'tasks', taskId);
         await updateDoc(taskRef, {
           ...updatedTask,
           updatedAt: serverTimestamp()
         });
       }
     } catch (error) {
       console.error("Error updating task: ", error);
     }
   };
   ```

4. **Deleting Task**:


   ```javascript
   import { db, auth } from './firebase';
   import { doc, deleteDoc } from 'firebase/firestore';

   const deleteTask = async (taskId) => {
     try {
       const user = auth.currentUser;
       if (user) {
         const taskRef = doc(db, 'users', user.uid, 'tasks', taskId);
         await deleteDoc(taskRef);
       }
     } catch (error) {
       console.error("Error deleting task: ", error);
     }
   };
   ```

###Implementing Real-Time Updates

1. **Real-Time Listeners**:
   - Use Firestore’s real-time listeners to update the task list when changes occur.

   ```javascript
   import { db, auth } from './firebase';
   import { collection, query, onSnapshot } from 'firebase/firestore';

   const subscribeToTasks = (setTasks) => {
     const user = auth.currentUser;
     if (user) {
       const q = query(collection(db, 'users', user.uid, 'tasks'));
       const unsubscribe = onSnapshot(q, (querySnapshot) => {
         const tasks = querySnapshot.docs.map(doc => ({
           id: doc.id,
           ...doc.data()
         }));
         setTasks(tasks);
       });
       return unsubscribe;
     }
   };
   ```

###  Code Structure


```plaintext
task-manager-app/
├── public/
│   ├── index.html
│   └── style.css
├── src/
│   ├── components/
│   │   ├── Auth.js
│   │   ├── TaskList.js
│   │   ├── AddTask.js
│   │   └── EditTask.js
│   ├── firebase.js
│   ├── App.js
│   └── index.js
├── .gitignore
├── package.json
└── README.md
